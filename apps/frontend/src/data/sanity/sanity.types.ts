/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type SanityImagePaletteSwatch = {
  _type: "sanity.imagePaletteSwatch";
  background?: string;
  foreground?: string;
  population?: number;
  title?: string;
};

export type SanityImagePalette = {
  _type: "sanity.imagePalette";
  darkMuted?: SanityImagePaletteSwatch;
  lightVibrant?: SanityImagePaletteSwatch;
  darkVibrant?: SanityImagePaletteSwatch;
  vibrant?: SanityImagePaletteSwatch;
  dominant?: SanityImagePaletteSwatch;
  lightMuted?: SanityImagePaletteSwatch;
  muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
  _type: "sanity.imageDimensions";
  height?: number;
  width?: number;
  aspectRatio?: number;
};

export type SanityFileAsset = {
  _id: string;
  _type: "sanity.fileAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  source?: SanityAssetSourceData;
};

export type Geopoint = {
  _type: "geopoint";
  lat?: number;
  lng?: number;
  alt?: number;
};

export type Project = {
  _id: string;
  _type: "project";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  sections?: Array<({
    _key: string;
  } & SectionAccordion) | ({
    _key: string;
  } & SectionContentMedia) | ({
    _key: string;
  } & SectionContent) | ({
    _key: string;
  } & SectionHero) | ({
    _key: string;
  } & SectionMediaGrid) | ({
    _key: string;
  } & SectionMedia) | ({
    _key: string;
  } & SectionMetrics)>;
};

export type Post = {
  _id: string;
  _type: "post";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  publishDate?: string;
  featuredImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  content?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "blockquote";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }>;
  excerpt?: string;
};

export type SectionMetrics = {
  _type: "section.metrics";
  metrics?: Array<{
    value?: string;
    label?: string;
    _type: "metric";
    _key: string;
  }>;
};

export type SectionMedia = {
  _type: "section.media";
  media?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
};

export type SectionMediaGrid = {
  _type: "section.mediaGrid";
  items?: Array<{
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "media";
    _key: string;
  }>;
};

export type SectionHero = {
  _type: "section.hero";
  title?: string;
  content?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "blockquote";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }>;
};

export type SectionContent = {
  _type: "section.content";
  title?: string;
  content?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "blockquote";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }>;
};

export type SectionContentMedia = {
  _type: "section.contentMedia";
  title?: string;
  content?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "blockquote";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }>;
  media?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
};

export type SectionAccordion = {
  _type: "section.accordion";
  title?: string;
  intro?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "blockquote";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }>;
  items?: Array<{
    title?: string;
    content?: Array<{
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: "span";
        _key: string;
      }>;
      style?: "normal" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "blockquote";
      listItem?: "bullet" | "number";
      markDefs?: Array<{
        href?: string;
        _type: "link";
        _key: string;
      }>;
      level?: number;
      _type: "block";
      _key: string;
    }>;
    _type: "item";
    _key: string;
  }>;
};

export type Sections = Array<({
  _key: string;
} & SectionAccordion) | ({
  _key: string;
} & SectionContentMedia) | ({
  _key: string;
} & SectionContent) | ({
  _key: string;
} & SectionHero) | ({
  _key: string;
} & SectionMediaGrid) | ({
  _key: string;
} & SectionMedia) | ({
  _key: string;
} & SectionMetrics)>;

export type LinkInternal = {
  _type: "linkInternal";
  label?: string;
  reference?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "page";
  };
};

export type LinkExternal = {
  _type: "linkExternal";
  label?: string;
  url?: string;
  newWindow?: boolean;
};

export type Page = {
  _id: string;
  _type: "page";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  sections?: Sections;
};

export type SanityImageCrop = {
  _type: "sanity.imageCrop";
  top?: number;
  bottom?: number;
  left?: number;
  right?: number;
};

export type SanityImageHotspot = {
  _type: "sanity.imageHotspot";
  x?: number;
  y?: number;
  height?: number;
  width?: number;
};

export type SanityImageAsset = {
  _id: string;
  _type: "sanity.imageAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  metadata?: SanityImageMetadata;
  source?: SanityAssetSourceData;
};

export type SanityAssetSourceData = {
  _type: "sanity.assetSourceData";
  name?: string;
  id?: string;
  url?: string;
};

export type SanityImageMetadata = {
  _type: "sanity.imageMetadata";
  location?: Geopoint;
  dimensions?: SanityImageDimensions;
  palette?: SanityImagePalette;
  lqip?: string;
  blurHash?: string;
  hasAlpha?: boolean;
  isOpaque?: boolean;
};

export type Slug = {
  _type: "slug";
  current?: string;
  source?: string;
};

export type Settings = {
  _id: string;
  _type: "settings";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  header?: {
    navigationItems?: Array<({
      _key: string;
    } & LinkInternal) | ({
      _key: string;
    } & LinkExternal)>;
  };
};

export type AllSanitySchemaTypes = SanityImagePaletteSwatch | SanityImagePalette | SanityImageDimensions | SanityFileAsset | Geopoint | Project | Post | SectionMetrics | SectionMedia | SectionMediaGrid | SectionHero | SectionContent | SectionContentMedia | SectionAccordion | Sections | LinkInternal | LinkExternal | Page | SanityImageCrop | SanityImageHotspot | SanityImageAsset | SanityAssetSourceData | SanityImageMetadata | Slug | Settings;
export declare const internalGroqTypeReferenceTo: unique symbol;
// Source: ../frontend/src/data/sanity/queries/pages.ts
// Variable: pageSlugsQuery
// Query: *[_type == "page" && defined(slug.current)][].slug.current
export type PageSlugsQueryResult = Array<string | null>;
// Variable: pageQuery
// Query: *[_type == "page" && slug.current == $slug][0]
export type PageQueryResult = {
  _id: string;
  _type: "page";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  sections?: Sections;
} | null;
// Variable: aboutPageQuery
// Query: *[_type == "aboutPage" ][0]
export type AboutPageQueryResult = null;
// Variable: contactPageQuery
// Query: *[_type == "contactPage" ][0]
export type ContactPageQueryResult = null;

// Source: ../frontend/src/data/sanity/queries/posts.ts
// Variable: postsPageQuery
// Query: *[_type == "postsPage" ][0]{    ...,    "posts": *[_type == "post" && defined(slug.current)]  }
export type PostsPageQueryResult = null;
// Variable: postsQuery
// Query: *[_type == "post" && defined(slug)]
export type PostsQueryResult = Array<{
  _id: string;
  _type: "post";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  publishDate?: string;
  featuredImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  content?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "normal";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }>;
  excerpt?: string;
}>;
// Variable: postSlugsQuery
// Query: *[_type == "post" && defined(slug.current)][].slug.current
export type PostSlugsQueryResult = Array<string | null>;
// Variable: postQuery
// Query: *[_type == "post" && slug.current == $slug][0]
export type PostQueryResult = {
  _id: string;
  _type: "post";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  publishDate?: string;
  featuredImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  content?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "normal";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }>;
  excerpt?: string;
} | null;

// Source: ../frontend/src/data/sanity/queries/settings.ts
// Variable: settingsQuery
// Query: *[_type == "settings"][0]{    header {      "navigationItems": coalesce(        navigationItems[]{            _type == 'linkInternal' => {      _key,  _type,  label,  'slug':reference->slug.current,  'documentType':reference->_type,  },  _type == 'linkExternal' => {      _key,  _type,  label,  url,  newWindow  }        },        []      )    },    intro,    tiles[] {      _key,      'slug':reference->slug.current,      label,      image,      colorScheme    }  }
export type SettingsQueryResult = {
  header: {
    navigationItems: Array<never> | Array<{
      _key: string;
      _type: "linkExternal";
      label: string | null;
      url: string | null;
      newWindow: boolean | null;
    } | {
      _key: string;
      _type: "linkInternal";
      label: string | null;
      slug: string | null;
      documentType: "page" | null;
    }>;
  } | null;
  intro: null;
  tiles: null;
} | null;

// Query TypeMap
import "@sanity/client";
declare module "@sanity/client" {
  interface SanityQueries {
    "\n  *[_type == \"page\" && defined(slug.current)][].slug.current\n": PageSlugsQueryResult;
    "\n  *[_type == \"page\" && slug.current == $slug][0]\n": PageQueryResult;
    "\n  *[_type == \"aboutPage\" ][0]\n": AboutPageQueryResult;
    "\n  *[_type == \"contactPage\" ][0]\n": ContactPageQueryResult;
    "\n  *[_type == \"postsPage\" ][0]{\n    ...,\n    \"posts\": *[_type == \"post\" && defined(slug.current)]\n  }\n": PostsPageQueryResult;
    "\n  *[_type == \"post\" && defined(slug)]\n": PostsQueryResult;
    "\n  *[_type == \"post\" && defined(slug.current)][].slug.current\n": PostSlugsQueryResult;
    "\n  *[_type == \"post\" && slug.current == $slug][0]\n": PostQueryResult;
    "\n  *[_type == \"settings\"][0]{\n    header {\n      \"navigationItems\": coalesce(\n        navigationItems[]{\n          \n  _type == 'linkInternal' => {\n    \n  _key,\n  _type,\n  label,\n  'slug':reference->slug.current,\n  'documentType':reference->_type,\n\n  },\n  _type == 'linkExternal' => {\n    \n  _key,\n  _type,\n  label,\n  url,\n  newWindow\n\n  }\n\n        },\n        []\n      )\n    },\n    intro,\n    tiles[] {\n      _key,\n      'slug':reference->slug.current,\n      label,\n      image,\n      colorScheme\n    }\n  }\n": SettingsQueryResult;
  }
}
