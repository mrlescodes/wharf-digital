/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type SanityImagePaletteSwatch = {
  _type: 'sanity.imagePaletteSwatch';
  background?: string;
  foreground?: string;
  population?: number;
  title?: string;
};

export type SanityImagePalette = {
  _type: 'sanity.imagePalette';
  darkMuted?: SanityImagePaletteSwatch;
  lightVibrant?: SanityImagePaletteSwatch;
  darkVibrant?: SanityImagePaletteSwatch;
  vibrant?: SanityImagePaletteSwatch;
  dominant?: SanityImagePaletteSwatch;
  lightMuted?: SanityImagePaletteSwatch;
  muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
  _type: 'sanity.imageDimensions';
  height?: number;
  width?: number;
  aspectRatio?: number;
};

export type SanityFileAsset = {
  _id: string;
  _type: 'sanity.fileAsset';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  source?: SanityAssetSourceData;
};

export type Geopoint = {
  _type: 'geopoint';
  lat?: number;
  lng?: number;
  alt?: number;
};

export type TeamMember = {
  _id: string;
  _type: 'teamMember';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  firstName?: string;
  lastName?: string;
  slug?: Slug;
  photo?: {
    asset?: {
      _ref: string;
      _type: 'reference';
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: 'image';
  };
  jobTitle?: string;
  email?: string;
  bio?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: 'span';
      _key: string;
    }>;
    style?: 'normal' | 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'blockquote';
    listItem?: 'bullet' | 'number';
    markDefs?: Array<{
      href?: string;
      _type: 'link';
      _key: string;
    }>;
    level?: number;
    _type: 'block';
    _key: string;
  }>;
};

export type Post = {
  _id: string;
  _type: 'post';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  publishDate?: string;
  content?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: 'span';
      _key: string;
    }>;
    style?: 'normal' | 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'blockquote';
    listItem?: 'bullet' | 'number';
    markDefs?: Array<{
      href?: string;
      _type: 'link';
      _key: string;
    }>;
    level?: number;
    _type: 'block';
    _key: string;
  }>;
};

export type LayoutRelatedProject = {
  _type: 'layout.relatedProject';
  title?: string;
  project?: {
    _ref: string;
    _type: 'reference';
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: 'project';
  };
};

export type Project = {
  _id: string;
  _type: 'project';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  pageBuilder?: Array<
    | ({
        _key: string;
      } & LayoutAccordion)
    | ({
        _key: string;
      } & LayoutContentMedia)
    | ({
        _key: string;
      } & LayoutContent)
    | ({
        _key: string;
      } & LayoutHero)
    | ({
        _key: string;
      } & LayoutMediaGrid)
    | ({
        _key: string;
      } & LayoutMedia)
    | ({
        _key: string;
      } & LayoutMetrics)
    | ({
        _key: string;
      } & LayoutPosts)
    | ({
        _key: string;
      } & LayoutFeaturedProjects)
    | ({
        _key: string;
      } & LayoutProjectIntro)
    | ({
        _key: string;
      } & LayoutProjects)
    | ({
        _key: string;
      } & LayoutRelatedProject)
  >;
};

export type LayoutProjects = {
  _type: 'layout.projects';
  title?: string;
};

export type LayoutProjectIntro = {
  _type: 'layout.projectIntro';
  title?: string;
  content?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: 'span';
      _key: string;
    }>;
    style?: 'normal' | 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'blockquote';
    listItem?: 'bullet' | 'number';
    markDefs?: Array<{
      href?: string;
      _type: 'link';
      _key: string;
    }>;
    level?: number;
    _type: 'block';
    _key: string;
  }>;
};

export type LayoutFeaturedProjects = {
  _type: 'layout.featuredProjects';
  title?: string;
  projects?: Array<{
    _ref: string;
    _type: 'reference';
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: 'project';
  }>;
};

export type LayoutPosts = {
  _type: 'layout.posts';
  title?: string;
};

export type LayoutMetrics = {
  _type: 'layout.metrics';
  metrics?: Array<{
    value?: string;
    label?: string;
    _type: 'metric';
    _key: string;
  }>;
};

export type LayoutMedia = {
  _type: 'layout.media';
  media?: {
    asset?: {
      _ref: string;
      _type: 'reference';
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: 'image';
  };
};

export type LayoutMediaGrid = {
  _type: 'layout.mediaGrid';
  items?: Array<{
    asset?: {
      _ref: string;
      _type: 'reference';
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: 'media';
    _key: string;
  }>;
};

export type LayoutHero = {
  _type: 'layout.hero';
  title?: string;
  content?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: 'span';
      _key: string;
    }>;
    style?: 'normal' | 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'blockquote';
    listItem?: 'bullet' | 'number';
    markDefs?: Array<{
      href?: string;
      _type: 'link';
      _key: string;
    }>;
    level?: number;
    _type: 'block';
    _key: string;
  }>;
};

export type LayoutContent = {
  _type: 'layout.content';
  title?: string;
  content?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: 'span';
      _key: string;
    }>;
    style?: 'normal' | 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'blockquote';
    listItem?: 'bullet' | 'number';
    markDefs?: Array<{
      href?: string;
      _type: 'link';
      _key: string;
    }>;
    level?: number;
    _type: 'block';
    _key: string;
  }>;
};

export type LayoutContentMedia = {
  _type: 'layout.contentMedia';
  title?: string;
  content?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: 'span';
      _key: string;
    }>;
    style?: 'normal' | 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'blockquote';
    listItem?: 'bullet' | 'number';
    markDefs?: Array<{
      href?: string;
      _type: 'link';
      _key: string;
    }>;
    level?: number;
    _type: 'block';
    _key: string;
  }>;
  media?: {
    asset?: {
      _ref: string;
      _type: 'reference';
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: 'image';
  };
};

export type LayoutAccordion = {
  _type: 'layout.accordion';
  title?: string;
  intro?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: 'span';
      _key: string;
    }>;
    style?: 'normal' | 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'blockquote';
    listItem?: 'bullet' | 'number';
    markDefs?: Array<{
      href?: string;
      _type: 'link';
      _key: string;
    }>;
    level?: number;
    _type: 'block';
    _key: string;
  }>;
  items?: Array<{
    title?: string;
    content?: Array<{
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: 'span';
        _key: string;
      }>;
      style?: 'normal' | 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'blockquote';
      listItem?: 'bullet' | 'number';
      markDefs?: Array<{
        href?: string;
        _type: 'link';
        _key: string;
      }>;
      level?: number;
      _type: 'block';
      _key: string;
    }>;
    _type: 'item';
    _key: string;
  }>;
};

export type PageBuilder = Array<
  | ({
      _key: string;
    } & LayoutAccordion)
  | ({
      _key: string;
    } & LayoutContentMedia)
  | ({
      _key: string;
    } & LayoutContent)
  | ({
      _key: string;
    } & LayoutHero)
  | ({
      _key: string;
    } & LayoutMediaGrid)
  | ({
      _key: string;
    } & LayoutMedia)
  | ({
      _key: string;
    } & LayoutMetrics)
  | ({
      _key: string;
    } & LayoutPosts)
  | ({
      _key: string;
    } & LayoutFeaturedProjects)
  | ({
      _key: string;
    } & LayoutProjectIntro)
  | ({
      _key: string;
    } & LayoutProjects)
  | ({
      _key: string;
    } & LayoutRelatedProject)
>;

export type LinkInternal = {
  _type: 'linkInternal';
  label?: string;
  reference?: {
    _ref: string;
    _type: 'reference';
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: 'page';
  };
};

export type Page = {
  _id: string;
  _type: 'page';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  pageBuilder?: PageBuilder;
};

export type SanityImageCrop = {
  _type: 'sanity.imageCrop';
  top?: number;
  bottom?: number;
  left?: number;
  right?: number;
};

export type SanityImageHotspot = {
  _type: 'sanity.imageHotspot';
  x?: number;
  y?: number;
  height?: number;
  width?: number;
};

export type SanityImageAsset = {
  _id: string;
  _type: 'sanity.imageAsset';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  metadata?: SanityImageMetadata;
  source?: SanityAssetSourceData;
};

export type SanityAssetSourceData = {
  _type: 'sanity.assetSourceData';
  name?: string;
  id?: string;
  url?: string;
};

export type SanityImageMetadata = {
  _type: 'sanity.imageMetadata';
  location?: Geopoint;
  dimensions?: SanityImageDimensions;
  palette?: SanityImagePalette;
  lqip?: string;
  blurHash?: string;
  hasAlpha?: boolean;
  isOpaque?: boolean;
};

export type Slug = {
  _type: 'slug';
  current?: string;
  source?: string;
};

export type LinkExternal = {
  _type: 'linkExternal';
  label?: string;
  url?: string;
  newWindow?: boolean;
};

export type Settings = {
  _id: string;
  _type: 'settings';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  headerMenu?: {
    _ref: string;
    _type: 'reference';
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: 'navigation';
  };
};

export type Navigation = {
  _id: string;
  _type: 'navigation';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  links?: Array<
    | ({
        _key: string;
      } & LinkInternal)
    | ({
        _key: string;
      } & LinkExternal)
  >;
};

export type AllSanitySchemaTypes =
  | SanityImagePaletteSwatch
  | SanityImagePalette
  | SanityImageDimensions
  | SanityFileAsset
  | Geopoint
  | TeamMember
  | Post
  | LayoutRelatedProject
  | Project
  | LayoutProjects
  | LayoutProjectIntro
  | LayoutFeaturedProjects
  | LayoutPosts
  | LayoutMetrics
  | LayoutMedia
  | LayoutMediaGrid
  | LayoutHero
  | LayoutContent
  | LayoutContentMedia
  | LayoutAccordion
  | PageBuilder
  | LinkInternal
  | Page
  | SanityImageCrop
  | SanityImageHotspot
  | SanityImageAsset
  | SanityAssetSourceData
  | SanityImageMetadata
  | Slug
  | LinkExternal
  | Settings
  | Navigation;
export declare const internalGroqTypeReferenceTo: unique symbol;
// Source: ../wharf-digital/src/lib/sanity/queries/page.ts
// Variable: pageSlugsQuery
// Query: *[_type == "page" && defined(slug.current)][].slug.current
export type PageSlugsQueryResult = Array<string | null>;
// Variable: pageQuery
// Query: *[_type == "page" && slug.current == $slug][0]{      ...,      pageBuilder[] => {            ...,    _type == 'projects' => {        "projects":  *[_type == 'project'],    },      }    }
export type PageQueryResult = {
  _id: string;
  _type: 'page';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  pageBuilder?: PageBuilder;
} | null;

// Source: ../wharf-digital/src/lib/sanity/queries/post.ts
// Variable: postsQuery
// Query: *[_type == "post" && defined(slug)]
export type PostsQueryResult = Array<{
  _id: string;
  _type: 'post';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  publishDate?: string;
  content?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: 'span';
      _key: string;
    }>;
    style?: 'blockquote' | 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'normal';
    listItem?: 'bullet' | 'number';
    markDefs?: Array<{
      href?: string;
      _type: 'link';
      _key: string;
    }>;
    level?: number;
    _type: 'block';
    _key: string;
  }>;
}>;
// Variable: postSlugsQuery
// Query: *[_type == "post" && defined(slug.current)][].slug.current
export type PostSlugsQueryResult = Array<string | null>;
// Variable: postQuery
// Query: *[_type == "post" && slug.current == $slug][0]
export type PostQueryResult = {
  _id: string;
  _type: 'post';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  publishDate?: string;
  content?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: 'span';
      _key: string;
    }>;
    style?: 'blockquote' | 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'normal';
    listItem?: 'bullet' | 'number';
    markDefs?: Array<{
      href?: string;
      _type: 'link';
      _key: string;
    }>;
    level?: number;
    _type: 'block';
    _key: string;
  }>;
} | null;

// Source: ../wharf-digital/src/lib/sanity/queries/project.ts
// Variable: projectsQuery
// Query: *[_type == "project" && defined(slug)]
export type ProjectsQueryResult = Array<{
  _id: string;
  _type: 'project';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  pageBuilder?: Array<
    | ({
        _key: string;
      } & LayoutAccordion)
    | ({
        _key: string;
      } & LayoutContent)
    | ({
        _key: string;
      } & LayoutContentMedia)
    | ({
        _key: string;
      } & LayoutFeaturedProjects)
    | ({
        _key: string;
      } & LayoutHero)
    | ({
        _key: string;
      } & LayoutMedia)
    | ({
        _key: string;
      } & LayoutMediaGrid)
    | ({
        _key: string;
      } & LayoutMetrics)
    | ({
        _key: string;
      } & LayoutPosts)
    | ({
        _key: string;
      } & LayoutProjectIntro)
    | ({
        _key: string;
      } & LayoutProjects)
    | ({
        _key: string;
      } & LayoutRelatedProject)
  >;
}>;
// Variable: projectSlugsQuery
// Query: *[_type == "project" && defined(slug.current)][].slug.current
export type ProjectSlugsQueryResult = Array<string | null>;
// Variable: projectQuery
// Query: *[_type == "project" && slug.current == $slug][0]
export type ProjectQueryResult = {
  _id: string;
  _type: 'project';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  pageBuilder?: Array<
    | ({
        _key: string;
      } & LayoutAccordion)
    | ({
        _key: string;
      } & LayoutContent)
    | ({
        _key: string;
      } & LayoutContentMedia)
    | ({
        _key: string;
      } & LayoutFeaturedProjects)
    | ({
        _key: string;
      } & LayoutHero)
    | ({
        _key: string;
      } & LayoutMedia)
    | ({
        _key: string;
      } & LayoutMediaGrid)
    | ({
        _key: string;
      } & LayoutMetrics)
    | ({
        _key: string;
      } & LayoutPosts)
    | ({
        _key: string;
      } & LayoutProjectIntro)
    | ({
        _key: string;
      } & LayoutProjects)
    | ({
        _key: string;
      } & LayoutRelatedProject)
  >;
} | null;

// Source: ../wharf-digital/src/lib/sanity/queries/settings.ts
// Variable: settingsQuery
// Query: *[_type == "settings"][0]{        headerMenu->{                ...,    links[]{            _type == 'linkInternal' => {            _key,    _type,    label,    'slug':reference->slug.current,    },    _type == 'linkExternal' => {            _key,    _type,    label,    url,    newWindow    }	}        }    }
export type SettingsQueryResult = {
  headerMenu: {
    _id: string;
    _type: 'navigation';
    _createdAt: string;
    _updatedAt: string;
    _rev: string;
    title?: string;
    links: Array<
      | {
          _key: string;
          _type: 'linkExternal';
          label: string | null;
          url: string | null;
          newWindow: boolean | null;
        }
      | {
          _key: string;
          _type: 'linkInternal';
          label: string | null;
          slug: string | null;
        }
    > | null;
  } | null;
} | null;

// Query TypeMap
import '@sanity/client';
declare module '@sanity/client' {
  interface SanityQueries {
    '\n  *[_type == "page" && defined(slug.current)][].slug.current\n': PageSlugsQueryResult;
    '\n    *[_type == "page" && slug.current == $slug][0]{\n      ...,\n      pageBuilder[] => {\n        \n    ...,\n    _type == \'projects\' => {\n        "projects":  *[_type == \'project\'],\n    },\n\n      }\n    }\n': PageQueryResult;
    '\n    *[_type == "post" && defined(slug)]\n': PostsQueryResult;
    '\n    *[_type == "post" && defined(slug.current)][].slug.current\n': PostSlugsQueryResult;
    '\n    *[_type == "post" && slug.current == $slug][0]\n': PostQueryResult;
    '\n    *[_type == "project" && defined(slug)]\n': ProjectsQueryResult;
    '\n    *[_type == "project" && defined(slug.current)][].slug.current\n': ProjectSlugsQueryResult;
    '\n    *[_type == "project" && slug.current == $slug][0]\n': ProjectQueryResult;
    "\n    *[_type == \"settings\"][0]{\n        headerMenu->{\n            \n    ...,\n    links[]{\n        \n    _type == 'linkInternal' => {\n        \n    _key,\n    _type,\n    label,\n    'slug':reference->slug.current,\n\n    },\n    _type == 'linkExternal' => {\n        \n    _key,\n    _type,\n    label,\n    url,\n    newWindow\n\n    }\n\n\t}\n\n        }\n    }\n": SettingsQueryResult;
  }
}
